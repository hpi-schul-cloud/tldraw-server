/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApiValidationError,
  AuthorizationBodyParams,
  AuthorizedReponse,
} from '../models/index.js';
import {
    ApiValidationErrorFromJSON,
    ApiValidationErrorToJSON,
    AuthorizationBodyParamsFromJSON,
    AuthorizationBodyParamsToJSON,
    AuthorizedReponseFromJSON,
    AuthorizedReponseToJSON,
} from '../models/index.js';

export interface AuthorizationReferenceControllerAuthorizeByReferenceRequest {
    authorizationBodyParams: AuthorizationBodyParams;
}

/**
 * AuthorizationApi - interface
 * 
 * @export
 * @interface AuthorizationApiInterface
 */
export interface AuthorizationApiInterface {
    /**
     * 
     * @summary Checks if user is authorized to perform the given operation.
     * @param {AuthorizationBodyParams} authorizationBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApiInterface
     */
    authorizationReferenceControllerAuthorizeByReferenceRaw(requestParameters: AuthorizationReferenceControllerAuthorizeByReferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizedReponse>>;

    /**
     * Checks if user is authorized to perform the given operation.
     */
    authorizationReferenceControllerAuthorizeByReference(requestParameters: AuthorizationReferenceControllerAuthorizeByReferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizedReponse>;

}

/**
 * 
 */
export class AuthorizationApi extends runtime.BaseAPI implements AuthorizationApiInterface {

    /**
     * Checks if user is authorized to perform the given operation.
     */
    async authorizationReferenceControllerAuthorizeByReferenceRaw(requestParameters: AuthorizationReferenceControllerAuthorizeByReferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizedReponse>> {
        if (requestParameters['authorizationBodyParams'] == null) {
            throw new runtime.RequiredError(
                'authorizationBodyParams',
                'Required parameter "authorizationBodyParams" was null or undefined when calling authorizationReferenceControllerAuthorizeByReference().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/authorization/by-reference`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizationBodyParamsToJSON(requestParameters['authorizationBodyParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizedReponseFromJSON(jsonValue));
    }

    /**
     * Checks if user is authorized to perform the given operation.
     */
    async authorizationReferenceControllerAuthorizeByReference(requestParameters: AuthorizationReferenceControllerAuthorizeByReferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizedReponse> {
        const response = await this.authorizationReferenceControllerAuthorizeByReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
