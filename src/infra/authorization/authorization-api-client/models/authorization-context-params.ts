/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Action } from './action.js';
import { ActionFromJSON, ActionToJSON } from './action.js';
import type { Permission } from './permission.js';
import { PermissionFromJSON, PermissionToJSON } from './permission.js';

/**
 *
 * @export
 * @interface AuthorizationContextParams
 */
export interface AuthorizationContextParams {
	/**
	 *
	 * @type {Action}
	 * @memberof AuthorizationContextParams
	 */
	action: Action;
	/**
	 * User permissions that are needed to execute the operation.
	 * @type {Array<Permission>}
	 * @memberof AuthorizationContextParams
	 */
	requiredPermissions: Array<Permission>;
}

/**
 * Check if a given object implements the AuthorizationContextParams interface.
 */
export function instanceOfAuthorizationContextParams(value: object): value is AuthorizationContextParams {
	if (!('action' in value) || value['action'] === undefined) return false;
	if (!('requiredPermissions' in value) || value['requiredPermissions'] === undefined) return false;
	return true;
}

export function AuthorizationContextParamsFromJSON(json: any): AuthorizationContextParams {
	return AuthorizationContextParamsFromJSONTyped(json, false);
}

export function AuthorizationContextParamsFromJSONTyped(
	json: any,
	ignoreDiscriminator: boolean,
): AuthorizationContextParams {
	if (json == null) {
		return json;
	}
	return {
		action: ActionFromJSON(json['action']),
		requiredPermissions: (json['requiredPermissions'] as Array<any>).map(PermissionFromJSON),
	};
}

export function AuthorizationContextParamsToJSON(json: any): AuthorizationContextParams {
	return AuthorizationContextParamsToJSONTyped(json, false);
}

export function AuthorizationContextParamsToJSONTyped(
	value?: AuthorizationContextParams | null,
	ignoreDiscriminator: boolean = false,
): any {
	if (value == null) {
		return value;
	}

	return {
		action: ActionToJSON(value['action']),
		requiredPermissions: (value['requiredPermissions'] as Array<any>).map(PermissionToJSON),
	};
}
